<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Command</key>
	<string># Current Battery Charge
	## Credit: http://bit.ly/KObFdh
usrBatteryPercent=`pmset -g ps  |  sed -n 's/.*[[:blank:]]+*\(.*%\).*/\1/p'`
usrBattery="ioreg -n AppleSmartBattery -r"
usrIsCharging=`$usrBattery | awk '/IsCharging/ {print $3}'`
usrFullyCharged=`$usrBattery | awk '/FullyCharged/ {print $3}'`
usrExtConnected=`$usrBattery | awk '/ExternalConnected/ {print $3}'`

# Battery Charge Remaining
usrBattMins=`ioreg -rn AppleSmartBattery | awk '/TimeRemaining/ {print $3}'`;
H=$(($usrBattMins / 60));
M=$(($usrBattMins - ($usrBattMins / 60) * 60));

if [ "$usrIsCharging" = "Yes" ]; then
	usrCharge="${usrBatteryPercent} (Charging)"
elif [ "$usrFullyCharged" = "Yes" -a "$usrExtConnected" = "Yes" ]; then
	usrCharge="${usrBatteryPercent} (Battery Full)"
elif [ "$usrIsCharging" = "No" -a "$usrExtConnected" = "Yes" ]; then	usrCharge="${usrBatteryPercent} (Not Charging)"
elif [ "$usrBattMins" -lt "700" -a "$usrBattMins" != "0" ]; then
	usrCharge=`printf ${usrBatteryPercent}'% (%i:%.02i Remaining)' $H $M`
else
	usrCharge="${usrBatteryPercent}"
fi

[ "$usrCharge" ] &amp;&amp; echo "${bold}Charge:${nobold}\t\t${usrCharge}" # Time Machine Backup
	## Credit for date code: http://bit.ly/NlMKyn
	## Credit for Ordinal code: http://bit.ly/Kw3fIN
tmBackup=`defaults read /Library/Preferences/com.apple.TimeMachine Destinations | awk -F\" 'NR==3 {print $4}'`
tmBackupDate=`date -j -f "%Y-%m-%d %H:%M:%S %z" "$tmBackup" "+%d/%m"`

if [ "$tmBackupDate" = "" ]; then
	tmNoBackup="No Backup Available"
elif [ "$tmBackupDate" = "`date '+%d/%m'`" ]; then
	tmLastBackup="Today, at %-I:%M %p"
elif [ "$tmBackupDate" = "`date -v-1d '+%d/%m'`" ]; then
	tmLastBackup="Yesterday, at %-I:%M %p"
else
	ordinal=`date -j -f "%Y-%m-%d %H:%M:%S %z" "$tmBackup" "+%-e" | sed -E 's/(1)$/\1st/'| sed -E 's/(2)$/\1nd/' | sed -E 's/([^1]3)$/\1rd/' | sed -E 's/([0-9])$/\1th/'`
	tmLastBackup="${ordinal} %B %Y"
fi

tmLastBackup=`date -j -f "%Y-%m-%d %H:%M:%S %z" "$tmBackup" "+${tmLastBackup}"`
[ "$tmNoBackup" ] &amp;&amp; tmLastBackup=$tmNoBackup
echo "${bold}Backup:${nobold}\t\t${tmLastBackup}"


# Get iCloud Usage Quota from System Preferences (24h Refresh)
	## User needs to be signed into iCloud via SysPrefs
usrIPv4=`ifconfig | awk '/broadcast/ {print $2;exit}'`
if [ "`date -v -24H +'%Y%j%H%M'`" -gt "`defaults read w3k.glet iCloud_Upd`" ]; then
	iCloud_Value=$(osascript ~/Downloads/iCloudQuota.scpt)
	defaults write w3k.glet iCloud_Storage $iCloud_Value
	defaults write w3k.glet iCloud_Free "$(echo $iCloud_Value | awk '{print $1*1073741824}')"
	defaults write w3k.glet iCloud_Used "$(echo $iCloud_Value | awk '{print ($4-$1)*1073741824}')"
	defaults write w3k.glet iCloud_Total "$(echo $iCloud_Value | awk '{print $4*1073741824}')"
	defaults write w3k.glet iCloud_Perc "$(echo $iCloud_Value | awk '{printf "%.f%%", ($4-$1)/$4*100}')"
	defaults write w3k.glet iCloud_Upd "$(date +'%Y%j%H%M')"
elif [ "`defaults read-type w3k.glet iCloud_Upd`" != "Type is string" ]; then
	defaults write w3k.glet iCloud_Upd "$(date -v -24H +'%Y%j%H%M')"	
fi

if [ "defaults read w3k.glet iCloud_Storage" = "Details not available." -a "$usrIPv4" ]; then
	defaults write w3k.glet iCloud_Upd "$(date -v -24H +'%Y%j%H%M')"
fi

[ "`defaults read w3k.glet iCloud_Storage`" ] &amp;&amp; echo "${bold}iCloud:${nobold}\t\t$(defaults read w3k.glet iCloud_Perc) ($(hrFormat $(defaults read w3k.glet iCloud_Used)) used)"


echo "  ⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯"
# Check GPU in use
	## Display GPU in use if GPU count is 2
gpu_count=`system_profiler -xml SPDisplaysDataType | awk '/sppci_model/ {ct=ct+NF}; END {print ct-1}'`
gpu_inf="system_profiler SPDisplaysDataType"
gpu_intel=`$gpu_inf | awk 'NR==15 {print $3}'`

if [ "$gpu_intel" = "LCD" -a "$gpu_count" = "2" ]; then
	# gpu_curr="Intergrated"
	gpu_curr=`$gpu_inf | awk -F": " 'NR==5 {print $2}'`
elif [ "$gpu_count" = "2" ]; then
	#gpu_curr="Discrete"
	gpu_curr=`$gpu_inf | awk -F": " 'NR==16 {print $2}'`
fi

echo "${bold}GPU:${nobold}\t\t"$gpu_curr
echo "  ⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯"

echo "FOLDERS"
# Current User Downloads Folder Size
fdrSize=`du -sh ~/Downloads | awk '{print $1}'`
[ "${fdrSize#${fdrSize%?}}" = "B" -o ${fdrSize%?} == "8.0" ] &amp;&amp; dirSize="Empty" || dirSize="${fdrSize%?} ${fdrSize#${fdrSize%?}}b"
echo "${bold}DL's:${nobold}\t\t${dirSize}"

#Current User DropBox Folder Size
fdrSize=`du -sh ~/Dropbox | awk '{print $1}'`
[ "${fdrSize#${fdrSize%?}}" = "B" -o ${fdrSize%?} == "8.0" ] &amp;&amp; dirSize="Empty" || dirSize="${fdrSize%?} ${fdrSize#${fdrSize%?}}b"
echo "${bold}Dropbox:${nobold}\t\t${dirSize}"

# Current User Trash Folder Size
fdrSize=`du -sh ~/.Trash | awk '{print $1}'`
[ "${fdrSize#${fdrSize%?}}" = "B" -o ${fdrSize%?} -lt "17" ] &amp;&amp; dirSize="Empty" || dirSize="${fdrSize%?} ${fdrSize#${fdrSize%?}}b"
echo "${bold}Trash:${nobold}\t\t${dirSize}"

echo "  ⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯"

echo "VOLUMES"

#Current User Download Volume Size
fdrSize=`du -sh /Volumes/Downloads | awk '{print $1}'`
[ "${fdrSize#${fdrSize%?}}" = "B" -o ${fdrSize%?} == "8.0" ] &amp;&amp; dirSize="Empty" || dirSize="${fdrSize%?} ${fdrSize#${fdrSize%?}}b"
echo "${bold}Download Volume:${nobold}\t\t${dirSize}"

#Current User Documents Volume Size
fdrSize=`du -sh /Volumes/Documents | awk '{print $1}'`
[ "${fdrSize#${fdrSize%?}}" = "B" -o ${fdrSize%?} == "8.0" ] &amp;&amp; dirSize="Empty" || dirSize="${fdrSize%?} ${fdrSize#${fdrSize%?}}b"
echo "${bold}Documents Volume:${nobold}\t\t${dirSize}"

#Current User Media Volume Size
fdrSize=`du -sh /Volumes/Media | awk '{print $1}'`
[ "${fdrSize#${fdrSize%?}}" = "B" -o ${fdrSize%?} == "8.0" ] &amp;&amp; dirSize="Empty" || dirSize="${fdrSize%?} ${fdrSize#${fdrSize%?}}b"
echo "${bold}Media Volume:${nobold}\t\t${dirSize}"




echo "  ⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯"
</string>
	<key>DisplayStatusImage</key>
	<true/>
	<key>DropShadow</key>
	<false/>
	<key>FailureImage</key>
	<data>
	TU0AKgAABAj///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANAAAAGgAAACAAAAAaAAAA
	DQAAAAAAAAAAAAAAAAAAAAAAAAAA////AAAAAAAAAAAAAAAAAAAAAAgAAQFYGBYWqyso
	KOExLy/9Kygo4RgWFqoAAQFXAAAACAAAAAAAAAAAAAAAAP///wAAAAAAAAAAAAAAAAgG
	BgZ8Rz4+8qWXl//c09P/6+Tl/93T0/+ll5f/Rz4+8gYGBnwAAAAIAAAAAAAAAAD///8A
	AAAAAAAAAAQHAgJkSS0t9Kt9ff/ct7j/7NHS/+7T0//s0dL/3be4/6t9ff9JLS30BwIC
	ZQAAAAUAAAAA////AAAAAAAAAAAmLhAQzJA+P/+1TEv/xmNe/8twav/LcGr/y3Bq/8Zj
	Xf+0TEv/kD4//y4QEMwAAAAmAAAAAP///wAAAAAABgAATmAZGvitMi//uSwh/8E+Mf/H
	TED/yU9D/8hNQP/DPjL/uiwi/64xL/9gGRr4BwAATQAAAAD///8AAAAAARUAAGiJGBr/
	wzgx/8tCNP/TV0n/3WZa/+BqXf/eaFr/1VhL/85DNP/GOTL/ihga/xYAAGcAAAAB////
	AAAAAAkYAABslRoW/9JNQP/dYFL/63Jm//KAdv/2hXv/9IF3/+10Zv/gYVP/1k5B/5Ya
	Fv8YAABrAAAACP///wAAAAANDAAAY4UZEu/iXU3/8Hhr//yFef/+lYn//puP//+Xiv/8
	h3r/8Xlr/+ZdTv+HGRLwDQAAZAAAAAv///8AAAAADwAAAE5aDAfL4FZI//6LgP//mI7/
	/qSY//+rnv/+p5r//5qP//+Ngf/nWEn/Ww0HywAAAE0AAAAN////AAAAAAwAAAAyDwAA
	jJInH+z/gHL//6qe//+4rP//vrL//7uu//+soP//g3X/lioh7BEAAIsAAAAzAAAADP//
	/wAAAAAFAAAAIAAAAF0dAACpkTUq6dt2Z/z6n5D//7Sj//qhkv/bd2r8kTYr6R4AAKoA
	AABcAAAAIAAAAAX///8AAAAAAQAAAA0AAAAyAAAAZwYAAKI0DgrIYi4l2XlANeJiLiXZ
	NA4KxwYAAKEAAABoAAAAMwAAAA0AAAAB////AAAAAAAAAAADAAAAEQAAADQAAABdAAAA
	fAAAAI8AAACVAAAAjgAAAHsAAABbAAAANAAAABIAAAADAAAAAP///wAAAAAAAAAAAAAA
	AAMAAAAOAAAAIQAAADYAAABGAAAATAAAAEUAAAA2AAAAIgAAAA4AAAAEAAAAAAAAAAD/
	//8AAAAAAAAAAAAAAAAAAAAAAQAAAAUAAAALAAAAEAAAABMAAAARAAAACwAAAAUAAAAB
	AAAAAAAAAAAAAAAAAA0BAAADAAAAAQAQAAABAQADAAAAAQAQAAABAgADAAAABAAABKoB
	AwADAAAAAQABAAABBgADAAAAAQACAAABEQAEAAAAAQAAAAgBEgADAAAAAQABAAABFQAD
	AAAAAQAEAAABFgADAAAAAQAQAAABFwAEAAAAAQAABAABHAADAAAAAQABAAABUgADAAAA
	AQACAAABUwADAAAABAAABLIAAAAAAAgACAAIAAgAAQABAAEAAQ==
	</data>
	<key>FontFamily</key>
	<string>HelveticaNeue-Bold</string>
	<key>FontSize</key>
	<real>14</real>
	<key>GeekletFrame</key>
	<string>{{641, 631}, {279, 274}}</string>
	<key>HasShadow</key>
	<false/>
	<key>Identifier</key>
	<string>org.tynsoe.geeklet.shell</string>
	<key>RefreshInterval</key>
	<integer>60</integer>
	<key>SetLocale</key>
	<true/>
	<key>SuccessImage</key>
	<data>
	TU0AKgAABAj///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANAAAAGgAAACAAAAAaAAAA
	DQAAAAAAAAAAAAAAAAAAAAAAAAAA////AAAAAAAAAAAAAAAAAAAAAAgBAQFYFhUWqygn
	KOEvLi/9KCco4RYVFqsBAQFYAAAACAAAAAAAAAAAAAAAAP///wAAAAAAAAAAAAAAAAgG
	AwZ8Pj0+8peYl//S0tP/4+Tl/9LS0/+XmJf/Pj0+8gYDBnwAAAAIAAAAAAAAAAD///8A
	AAAAAAAAAAUDAQJlLTEt9HqRff+40Ln/1efT/9jo1f/V59P/uNG5/3qRff8tMS30AwEC
	ZQAAAAUAAAAA////AAAAAAAAAAAmEBYQyz1tP/9Xm03/eLJX/4e6YP+HuWL/h7pg/3ix
	V/9Wmk3/PWw//xAWEMsAAAAmAAAAAP///wAAAAAAAAAAThY8Gvc8jjD/TJwb/2CnHf9r
	ryz/bLEv/2ywLP9iqR7/TJ4b/zyQMP8WPBr3AAAATQAAAAD///8AAAAAAQAIAGgeYRv/
	VaUq/2WvIP91uzb/gsZI/4bIS/+DyEj/d743/2exIP9WqSr/HmIb/wAIAGcAAAAB////
	AAAAAAgADABsJ3MY/3C6Nv9/xz3/kNNT/57dYv+i32f/n99k/5HWVP+AyD3/cr02/yd0
	GP8ADQBsAAAACf///wAAAAAMAAYAYydqEPB/yD7/lNhW/6PlZv+x8Xb/uPd8/7P0eP+k
	6Gf/ldpX/4DLQP8maxDvAAYAYwAAAAv///8AAAAADwAAAE4XRwXLd8Y5/6foa/+393v/
	wv6F/8r/i//F/4b/uPt8/6rubP95yTr/F0kFygAAAEwAAAAN////AAAAAAwAAAAyAAwA
	jEB6GOyh7Vz/yP+J/9X/mP/b/5//2P+b/83/i/+m9F3/Qn4X7AEMAIsAAAAzAAAADP//
	/wAAAAAFAAAAIAAAAF4GFQCpTIQc6ZbZU/zC+3n/2P+L/8T6fP+a21b8UIkd6AYXAKkA
	AABcAAAAIAAAAAX///8AAAAAAQAAAA0AAAAzAAAAZwAFAKIaMwTHQGIZ2FV5JuFAYhnZ
	GzQEyAAFAKAAAABnAAAAMgAAAA0AAAAB////AAAAAAAAAAADAAAAEQAAADQAAABdAAAA
	ewAAAI8AAACWAAAAjwAAAHsAAABcAAAAMwAAABEAAAADAAAAAP///wAAAAAAAAAAAAAA
	AAMAAAAOAAAAIQAAADYAAABGAAAATAAAAEcAAAA2AAAAIQAAAA0AAAAEAAAAAAAAAAD/
	//8AAAAAAAAAAAAAAAAAAAAAAQAAAAUAAAALAAAAEAAAABMAAAASAAAADAAAAAUAAAAB
	AAAAAAAAAAAAAAAAAA0BAAADAAAAAQAQAAABAQADAAAAAQAQAAABAgADAAAABAAABKoB
	AwADAAAAAQABAAABBgADAAAAAQACAAABEQAEAAAAAQAAAAgBEgADAAAAAQABAAABFQAD
	AAAAAQAEAAABFgADAAAAAQAQAAABFwAEAAAAAQAABAABHAADAAAAAQABAAABUgADAAAA
	AQACAAABUwADAAAABAAABLIAAAAAAAgACAAIAAgAAQABAAEAAQ==
	</data>
	<key>TextColor</key>
	<data>
	BAtzdHJlYW10eXBlZIHoA4QBQISEhAdOU0NvbG9yAISECE5TT2JqZWN0AIWEAWMBhARm
	ZmZmAQEBAYY=
	</data>
	<key>TextStrikethrough</key>
	<integer>0</integer>
	<key>TextUnderline</key>
	<integer>0</integer>
</dict>
</plist>
